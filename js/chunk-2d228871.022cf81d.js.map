{"version":3,"sources":["webpack:///./src/views/bioInfo/Bio-boxplot-points.vue","webpack:///./src/views/bioInfo/Bio-boxplot-points.vue?4a12"],"names":["id","name","margin","top","right","bottom","left","width","height","svg","d3","append","attr","then","data","sumstat","d","quanti","p","map","g","Sepal_Length","sort","q1","median","q3","interQuantileRange","min","max","Species","item","key","value","x","range","domain","paddingInner","paddingOuter","call","y","selectAll","enter","style","boxWidth","jitterWidth","Math","random","render","__scopeId"],"mappings":"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","file":"js/chunk-2d228871.022cf81d.js","sourcesContent":["<template>\n  <div id='svg-contrainer'>\n\n  </div>\n</template>\n\n<script>\nimport { defineComponent, onMounted } from 'vue'\nimport * as d3 from 'd3'\n\nexport default defineComponent({\n  name: 'Bio-boxplot-points',\n  setup () {\n    onMounted(() => {\n      const margin = { top: 10, right: 30, bottom: 30, left: 40 }\n      const width = 460 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      // append the svg object to the body of the page\n      const svg = d3\n        .select('#svg-contrainer')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Read the data and compute summary statistics for each specie\n      d3.csv('https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv')\n        .then(data => {\n          // Compute quartiles, median, inter quantile range min and max --> these info are then used to draw the box.\n          const sumstat = d3\n            .rollups(data, d => {\n              const quanti = p => d3.quantile(d.map(g => g.Sepal_Length).sort(d3.ascending), p)\n              const q1 = quanti(0.25)\n              const median = quanti(0.5)\n              const q3 = quanti(0.75)\n              const interQuantileRange = q3 - q1\n              const min = q1 - 1.5 * interQuantileRange\n              const max = q3 + 1.5 * interQuantileRange\n              return { q1, median, q3, interQuantileRange, min, max }\n            }, d => d.Species)\n            .map(item => ({ key: item[0], value: item[1] }))\n\n          debugger\n          // Show the X scale\n          const x = d3\n            .scaleBand()\n            .range([0, width])\n            .domain(['setosa', 'versicolor', 'virginica'])\n            .paddingInner(1)\n            .paddingOuter(0.5)\n          svg\n            .append('g')\n            .attr('transform', `translate(0,${height})`)\n            .call(d3.axisBottom(x))\n\n          // Show the Y scale\n          const y = d3\n            .scaleLinear()\n            .domain([3, 9])\n            .range([height, 0])\n          svg.append('g').call(d3.axisLeft(y))\n\n          // Show the main vertical line\n          svg\n            .selectAll('vertLines')\n            .data(sumstat)\n            .enter()\n            .append('line')\n            .attr('x1', d => x(d.key))\n            .attr('x2', d => x(d.key))\n            .attr('y1', d => y(d.value.min))\n            .attr('y2', d => y(d.value.max))\n            .attr('stroke', 'black')\n            .style('width', 40)\n\n          // rectangle for the main box\n          const boxWidth = 100\n          svg\n            .selectAll('boxes')\n            .data(sumstat)\n            .enter()\n            .append('rect')\n            .attr('x', d => x(d.key) - boxWidth / 2)\n            .attr('y', d => y(d.value.q3))\n            .attr('height', d => y(d.value.q1) - y(d.value.q3))\n            .attr('width', boxWidth)\n            .attr('stroke', 'black')\n            .style('fill', '#69b3a2')\n\n          // Show the median\n          svg\n            .selectAll('medianLines')\n            .data(sumstat)\n            .enter()\n            .append('line')\n            .attr('x1', d => x(d.key) - boxWidth / 2)\n            .attr('x2', d => x(d.key) + boxWidth / 2)\n            .attr('y1', d => y(d.value.median))\n            .attr('y2', d => y(d.value.median))\n            .attr('stroke', 'black')\n            .style('width', 80)\n\n          // Add individual points with jitter\n          const jitterWidth = 50\n          svg\n            .selectAll('indPoints')\n            .data(data)\n            .enter()\n            .append('circle')\n            .attr('cx', d => x(d.Species) - jitterWidth / 2 + Math.random() * jitterWidth)\n            .attr('cy', d => y(d.Sepal_Length))\n            .attr('r', 4)\n            .style('fill', 'white')\n            .attr('stroke', 'black')\n        })\n    })\n  }\n\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n</style>\n","import { render } from \"./Bio-boxplot-points.vue?vue&type=template&id=36f06814&scoped=true\"\nimport script from \"./Bio-boxplot-points.vue?vue&type=script&lang=js\"\nexport * from \"./Bio-boxplot-points.vue?vue&type=script&lang=js\"\nscript.render = render\nscript.__scopeId = \"data-v-36f06814\"\n\nexport default script"],"sourceRoot":""}