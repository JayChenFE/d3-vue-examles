{"version":3,"sources":["webpack:///./src/views/bioInfo/Bio-boxplot-basic.vue","webpack:///./src/views/bioInfo/Bio-boxplot-basic.vue?d2ef"],"names":["id","name","margin","top","right","bottom","left","width","height","svg","d3","append","attr","data","dataSorted","sort","q1","median","q3","interQuantileRange","min","max","y","domain","range","call","center","rectWidth","style","selectAll","enter","d","render","__scopeId"],"mappings":"kPACOA,GAAG,kB,6EAAR,yBAEM,MAFN,K,gBASa,+BAAgB,CAC7BC,KAAM,oBACN,QACE,uBAAU,KAER,MAAMC,EAAS,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACjDC,EAAQ,IAAML,EAAOI,KAAOJ,EAAOE,MACnCI,EAAS,IAAMN,EAAOC,IAAMD,EAAOG,OAGnCI,EAAMC,EAAA,KAAU,mBACnBC,OAAO,OACPC,KAAK,QAASL,EAAQL,EAAOI,KAAOJ,EAAOE,OAC3CQ,KAAK,SAAUJ,EAASN,EAAOC,IAAMD,EAAOG,QAC5CM,OAAO,KACPC,KAAK,YACJ,aAAeV,EAAOI,KAAO,IAAMJ,EAAOC,IAAM,KAG9CU,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAGnEC,EAAaD,EAAKE,KAAKL,EAAA,MACvBM,EAAKN,EAAA,KAAYI,EAAY,KAC7BG,EAASP,EAAA,KAAYI,EAAY,IACjCI,EAAKR,EAAA,KAAYI,EAAY,KAC7BK,EAAqBD,EAAKF,EAC1BI,EAAMJ,EAAK,IAAMG,EACjBE,EAAML,EAAK,IAAMG,EAGjBG,EAAIZ,EAAA,OACPa,OAAO,CAAC,EAAG,KACXC,MAAM,CAAChB,EAAQ,IAClBC,EAAIgB,KAAKf,EAAA,KAAYY,IAGrB,MAAMI,EAAS,IACTC,EAAY,IAGlBlB,EACGE,OAAO,QACPC,KAAK,KAAMc,GACXd,KAAK,KAAMc,GACXd,KAAK,KAAMU,EAAEF,IACbR,KAAK,KAAMU,EAAED,IACbT,KAAK,SAAU,SAGlBH,EACGE,OAAO,QACPC,KAAK,IAAKc,EAASC,EAAY,GAC/Bf,KAAK,IAAKU,EAAEJ,IACZN,KAAK,SAAWU,EAAEN,GAAMM,EAAEJ,IAC1BN,KAAK,QAASe,GACdf,KAAK,SAAU,SACfgB,MAAM,OAAQ,WAGjBnB,EACGoB,YACAhB,KAAK,CAACO,EAAKH,EAAQI,IACnBS,QACAnB,OAAO,QACPC,KAAK,KAAMc,EAASC,EAAY,GAChCf,KAAK,KAAMc,EAASC,EAAY,GAChCf,KAAK,MAAM,SAAUmB,GAAK,OAAQT,EAAES,MACpCnB,KAAK,MAAM,SAAUmB,GAAK,OAAQT,EAAES,MACpCnB,KAAK,SAAU,YC5ExB,EAAOoB,OAASA,EAChB,EAAOC,UAAY,kBAEJ","file":"js/chunk-2d0aa788.69945e81.js","sourcesContent":["<template>\n  <div id='svg-contrainer'>\n\n  </div>\n</template>\n\n<script>\nimport { defineComponent, onMounted } from 'vue'\nimport * as d3 from 'd3'\n\nexport default defineComponent({\n  name: 'Bio-boxplot-basic',\n  setup () {\n    onMounted(() => {\n      // set the dimensions and margins of the graph\n      const margin = { top: 10, right: 30, bottom: 30, left: 40 }\n      const width = 400 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      // append the svg object to the page\n      const svg = d3.select('#svg-contrainer')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform',\n          'translate(' + margin.left + ',' + margin.top + ')')\n\n      // create dummy data\n      const data = [12, 19, 11, 13, 12, 22, 13, 4, 15, 16, 18, 19, 20, 12, 11, 9]\n\n      // Compute summary statistics used for the box:\n      const dataSorted = data.sort(d3.ascending)\n      const q1 = d3.quantile(dataSorted, 0.25)\n      const median = d3.quantile(dataSorted, 0.5)\n      const q3 = d3.quantile(dataSorted, 0.75)\n      const interQuantileRange = q3 - q1\n      const min = q1 - 1.5 * interQuantileRange\n      const max = q1 + 1.5 * interQuantileRange\n\n      // Show the Y scale\n      const y = d3.scaleLinear()\n        .domain([0, 24])\n        .range([height, 0])\n      svg.call(d3.axisLeft(y))\n\n      // a few features for the box\n      const center = 200\n      const rectWidth = 100\n\n      // Show the main vertical line\n      svg\n        .append('line')\n        .attr('x1', center)\n        .attr('x2', center)\n        .attr('y1', y(min))\n        .attr('y2', y(max))\n        .attr('stroke', 'black')\n\n      // Show the box\n      svg\n        .append('rect')\n        .attr('x', center - rectWidth / 2)\n        .attr('y', y(q3))\n        .attr('height', (y(q1) - y(q3)))\n        .attr('width', rectWidth)\n        .attr('stroke', 'black')\n        .style('fill', '#69b3a2')\n\n      // show median, min and max horizontal lines\n      svg\n        .selectAll()\n        .data([min, median, max])\n        .enter()\n        .append('line')\n        .attr('x1', center - rectWidth / 2)\n        .attr('x2', center + rectWidth / 2)\n        .attr('y1', function (d) { return (y(d)) })\n        .attr('y2', function (d) { return (y(d)) })\n        .attr('stroke', 'red')\n    })\n  }\n\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n</style>\n","import { render } from \"./Bio-boxplot-basic.vue?vue&type=template&id=48ef8f29&scoped=true\"\nimport script from \"./Bio-boxplot-basic.vue?vue&type=script&lang=js\"\nexport * from \"./Bio-boxplot-basic.vue?vue&type=script&lang=js\"\nscript.render = render\nscript.__scopeId = \"data-v-48ef8f29\"\n\nexport default script"],"sourceRoot":""}